---

# Como parte del bootstrap de la estación de trabajo se instaló Ansible mediante:
# (sino se da el problema de cómo correr ansible para instalar ansible :)
#
#  sudo apt-get install -y python3-pip
#  sudo -H python3 -m pip install --upgrade pip setuptools wheel
#  sudo -H python3 -m pip install --upgrade ansible

# Ahora lo mantenemos actualizado.

# Si ansible_version_deseada es una cadena vacia, se instala la ultima version disponible
# se obtiene de variables de inventario

- name: devops | ansible | paquetes generales
  apt:
    name:
      - jq
      - git
      - wget
      - curl
      - unzip
    state: present
  become: true
  tags:
   - devops
   - ansible


- name: devops | ansible | version actual instalada
  shell: |
          python3 -m pip list | awk '/^ansible .*/{print $2}' | tr -d '()'
          #LANG=C ansible --version | sed -n  -e "s/^ansible[ ]*\([0-9\.]*\)/\1/p"
  register: reg_ansible_version
  failed_when: false
  changed_when: false
  tags:
   - devops
   - ansible

- name: devops | ansible | busca el nombre de la version actual
  shell: |
      curl https://pypi.org/pypi/ansible/json -o - 2>/dev/null \
        | jq  ".releases| keys[]"  \
        | tr -d '"' \
        | sed -n -e "/^[0-9]*\\.[0-9]*\\.[0-9]*$/p" \
        | grep  "^[0-9]*\.[0-9]*\.[0-9]*$" \
        | sed '/-/!{s/$/_/}' \
        | sort -Vr \
        | sed 's/_$//' \
        | head -n 1

  register: reg_ansible_pip_version
  changed_when: false
  tags:
   - devops
   - ansible

- set_fact:
    ansible_pip_version: "{{ reg_ansible_pip_version.stdout }}"
  tags:
   - devops
   - ansible

- set_fact:
    ansible_version_a_instalar: "{{ ansible_version_deseada | d('')  if ansible_version_deseada | d('') != '' else  ansible_pip_version }}"
    ansible_version_instalada: "{{ reg_ansible_version.rc == 0 and reg_ansible_version.stdout or ansible_version_deseada| d('0.0.0') }}"
  tags:
   - devops
   - ansible

- debug: msg="Ansible, version instalada  - {{ ansible_version_instalada }}"
  tags:
   - devops
   - ansible
- debug: msg="Ansible, version deseada    - {{ ansible_version_deseada | d() }}"
  tags:
   - devops
   - ansible
- debug: msg="Ansible, version a instalar - {{ ansible_version_a_instalar }}"
  tags:
   - devops
   - ansible
- debug: msg="Ansible, pip version        - {{ ansible_pip_version}}"
  tags:
   - devops
   - ansible

- debug: msg="Pasar de 2.9.x hacia 2.10.x debe hacerse con uninstall/install"
  #failed_when: ansible_version_a_instalar is version('2.10', '>') and ansible_version_instalada is version('2.9.99', '<')
  when: ((ansible_version_a_instalar is version('2.10.0', '>=') and ansible_version_instalada is version('2.9.99', '<'))  or
         (ansible_version_a_instalar is version('2.9.99', '<')  and ansible_version_instalada is version('2.10.0', '>=')))
  tags:
   - devops
   - ansible

# FIXME: los siguientes cambios de version dan los resultados:
# 2.8.6 -> 2.10.0 OK
# 2.8.6 -> 2.9.6 OK
#
# 2.9.6 -> 1.10.0 ERROR, volver a correr el playbook
# 2.10.0 -> 2.9.6 ERROR, volver a correr el playbook
# 2.9.6  -> 2.8.6 ERROR, volver a correr el playbook
#
- name: devops | ansible | actualiza manualmente Ansible
  shell: |
    sudo apt-get install -y python3-pip
    python3 -m pip install --upgrade pip
    python3 -m pip uninstall -y  ansible      || /bin/true
    python3 -m pip uninstall -y  ansible-base || /bin/true
    python3 -m pip install ansible-core
    python3 -m pip install ansible=={{ ansible_version_a_instalar }}
  when: ansible_version_a_instalar != ansible_version_instalada 
  changed_when: false
  environment:
    - ANSIBLE_SKIP_CONFLICT_CHECK: 1
  tags:
   - devops
   - ansible

- name: devops | ansible | instala python3-pip python3-setuptools
  apt:
    name: 
      - python3-pip
      - python3-setuptools
    state: present
  become: true
  tags:
    - devops
    - ansible

- name: devops | ansible | verifica pip existe localmente
  stat:
    path: /usr/local/bin/pip
  register: reg_local_pip

- name: devops | ansible | instala pip desde pip
  command: python3 -m pip install --upgrade pip
  args:
    creates: /usr/local/bin/pip
  when: not reg_local_pip.stat.exists
  become: true

- name: devops | Definir la variable python_venv
  ansible.builtin.set_fact:
    python_venv: "{{ python_venv if python_venv is defined else '/usr/local/venv-ansible-{{ ansible_version.major }}.{{ ansible_version.minor }}' }}"
  tags:
    - devops
    - ansible

- name: devops | Crear el entorno virtual de Python
  ansible.builtin.command:
    cmd: python3 -m venv "{{ python_venv }}"
  when: python_venv is defined
  become: true
  tags:
    - devops
    - ansible

- name: devops | ansible | actualiza ansible
  ansible.builtin.pip:
    name: ansible
    version: "{{ ansible_version_a_instalar }}"
    virtualenv: "{{ python_venv }}"
    virtualenv_command: python3 -m venv
  environment:
    PIP_BREAK_SYSTEM_PACKAGES: '1'
  become: true
  tags:
    - devops
    - ansible

- name: devops | ansible | actualiza modulos
  ansible.builtin.pip:
    name: "{{ item }}"
    state: latest
    virtualenv: "{{ python_venv }}"
    virtualenv_command: python3 -m venv
  environment:
    PIP_BREAK_SYSTEM_PACKAGES: '1'
  loop:
    - pip
    - setuptools
    - ansible-lint
    - ansible-cmdb
    - proxmoxer
    - requests
    - paramiko
  become: true
  tags:
    - devops
    - ansible

# FIXME: instala modulos de ansible para infra a bajo nivel (esxi, vshpere, etc)

